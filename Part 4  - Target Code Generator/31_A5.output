Terminals unused in grammar

    BITWISE_NOR


State 163 conflicts: 1 shift/reduce


Grammar

    0 $accept: translation_unit $end

    1 primary_expression: IDENTIFIER
    2                   | INTEGER_CONSTANT
    3                   | CHARACTER_CONSTANT
    4                   | STRING_LITERAL
    5                   | LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    6 argument_expression_list: assignment_expression
    7                         | argument_expression_list COMMA assignment_expression

    8 postfix_expression: primary_expression
    9                   | postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
   10                   | postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
   11                   | postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
   12                   | postfix_expression DOT IDENTIFIER
   13                   | postfix_expression ARROW IDENTIFIER

   14 unary_expression: postfix_expression
   15                 | unary_operator unary_expression

   16 unary_operator: BITWISE_AND
   17               | MULTIPLICATION
   18               | ADD_LEX
   19               | SUBTRACTION
   20               | NOT

   21 multiplicative_expression: unary_expression
   22                          | multiplicative_expression MULTIPLICATION unary_expression
   23                          | multiplicative_expression DIVISION unary_expression
   24                          | multiplicative_expression MODULO unary_expression

   25 additive_expression: multiplicative_expression
   26                    | additive_expression ADD_LEX multiplicative_expression
   27                    | additive_expression SUBTRACTION multiplicative_expression

   28 relational_expression: additive_expression
   29                      | relational_expression LESS_THAN additive_expression
   30                      | relational_expression GREATER_THAN additive_expression
   31                      | relational_expression LESS_THAN_OR_EQUAL_TO additive_expression
   32                      | relational_expression GREATER_THAN_OR_EQUAL_TO additive_expression

   33 equality_expression: relational_expression
   34                    | equality_expression EQUAL relational_expression
   35                    | equality_expression NOT_EQUAL relational_expression

   36 logical_and_expression: equality_expression
   37                       | logical_and_expression LOGICAL_AND A equality_expression

   38 logical_or_expression: logical_and_expression
   39                      | logical_or_expression LOGICAL_OR A logical_and_expression

   40 conditional_expression: logical_or_expression
   41                       | logical_or_expression B QUESTION_MARK A expression B COLON A conditional_expression

   42 A: ε

   43 B: ε

   44 assignment_expression: conditional_expression
   45                      | unary_expression assignment_operator assignment_expression

   46 assignment_operator: ASSIGN_LEX

   47 expression: assignment_expression

   48 declaration: type_specifier init_declarator_list SEMICOLON

   49 init_declarator_list: init_declarator
   50                     | init_declarator_list COMMA init_declarator

   51 init_declarator: declarator
   52                | declarator ASSIGN_LEX initializer

   53 type_specifier: VOID_LEX
   54               | CHAR_LEX
   55               | INT_LEX

   56 declarator: pointer direct_declarator
   57           | direct_declarator

   58 intermediate_identifier: IDENTIFIER

   59 direct_declarator: IDENTIFIER
   60                  | intermediate_identifier LEFT_SQUARE_BRACKET INTEGER_CONSTANT RIGHT_SQUARE_BRACKET
   61                  | intermediate_identifier LEFT_PARENTHESIS parameter_list_opt RIGHT_PARENTHESIS

   62 parameter_list_opt: parameter_list
   63                   | ε

   64 pointer: MULTIPLICATION

   65 parameter_list: parameter_declaration
   66               | parameter_list COMMA parameter_declaration

   67 intermediate_declarator: pointer intermediate_identifier
   68                        | intermediate_identifier

   69 parameter_declaration: type_specifier intermediate_declarator
   70                      | type_specifier

   71 initializer: assignment_expression

   72 statement: compound_statement
   73          | expression_statement
   74          | selection_statement
   75          | iteration_statement
   76          | jump_statement

   77 compound_statement: LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
   78                   | LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET

   79 block_item_list: block_item
   80                | block_item_list A block_item

   81 block_item: declaration
   82           | statement

   83 expression_statement: expression SEMICOLON
   84                     | SEMICOLON

   85 selection_statement: IF LEFT_PARENTHESIS expression B RIGHT_PARENTHESIS A statement B
   86                    | IF LEFT_PARENTHESIS expression B RIGHT_PARENTHESIS A statement B ELSE A statement B

   87 iteration_statement: FOR LEFT_PARENTHESIS expression_statement A expression_statement B A expression B RIGHT_PARENTHESIS A statement

   88 jump_statement: RETURN_LEX SEMICOLON
   89               | RETURN_LEX expression SEMICOLON

   90 translation_unit: external_declaration
   91                 | translation_unit external_declaration

   92 external_declaration: function_definition
   93                     | declaration

   94 function_definition: type_specifier declarator declaration_list compound_statement
   95                    | function_prototype compound_statement

   96 function_prototype: type_specifier declarator

   97 declaration_list: declaration
   98                 | declaration_list declaration


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    CHAR_LEX (258) 54
    ELSE (259) 86
    FOR (260) 87
    IF (261) 85 86
    INT_LEX (262) 55
    RETURN_LEX (263) 88 89
    VOID_LEX (264) 53
    LEFT_SQUARE_BRACKET (265) 9 60
    RIGHT_SQUARE_BRACKET (266) 9 60
    LEFT_PARENTHESIS (267) 5 10 11 61 85 86 87
    RIGHT_PARENTHESIS (268) 5 10 11 61 85 86 87
    LEFT_CURLY_BRACKET (269) 77 78
    RIGHT_CURLY_BRACKET (270) 77 78
    DOT (271) 12
    ARROW (272) 13
    BITWISE_AND (273) 16
    MULTIPLICATION (274) 17 22 64
    ADD_LEX (275) 18 26
    SUBTRACTION (276) 19 27
    BITWISE_NOR (277)
    NOT (278) 20
    DIVISION (279) 23
    MODULO (280) 24
    LESS_THAN (281) 29
    GREATER_THAN (282) 30
    LESS_THAN_OR_EQUAL_TO (283) 31
    GREATER_THAN_OR_EQUAL_TO (284) 32
    EQUAL (285) 34
    NOT_EQUAL (286) 35
    LOGICAL_AND (287) 37
    LOGICAL_OR (288) 39
    QUESTION_MARK (289) 41
    COLON (290) 41
    SEMICOLON (291) 48 83 84 88 89
    ASSIGN_LEX (292) 46 52
    COMMA (293) 7 50 66
    IDENTIFIER <str> (294) 1 12 13 58 59
    INTEGER_CONSTANT <intval> (295) 2 60
    CHARACTER_CONSTANT <charval> (296) 3
    STRING_LITERAL <str> (297) 4


Nonterminals, with rules where they appear

    $accept (43)
        on left: 0
    primary_expression <expression_parse> (44)
        on left: 1 2 3 4 5
        on right: 8
    argument_expression_list <list_for_params> (45)
        on left: 6 7
        on right: 7 11
    postfix_expression <expression_parse> (46)
        on left: 8 9 10 11 12 13
        on right: 9 10 11 12 13 14
    unary_expression <expression_parse> (47)
        on left: 14 15
        on right: 15 21 22 23 24 45
    unary_operator <charval> (48)
        on left: 16 17 18 19 20
        on right: 15
    multiplicative_expression <expression_parse> (49)
        on left: 21 22 23 24
        on right: 22 23 24 25 26 27
    additive_expression <expression_parse> (50)
        on left: 25 26 27
        on right: 26 27 28 29 30 31 32
    relational_expression <expression_parse> (51)
        on left: 28 29 30 31 32
        on right: 29 30 31 32 33 34 35
    equality_expression <expression_parse> (52)
        on left: 33 34 35
        on right: 34 35 36 37
    logical_and_expression <expression_parse> (53)
        on left: 36 37
        on right: 37 38 39
    logical_or_expression <expression_parse> (54)
        on left: 38 39
        on right: 39 40 41
    conditional_expression <expression_parse> (55)
        on left: 40 41
        on right: 41 44
    A <expression_parse> (56)
        on left: 42
        on right: 37 39 41 80 85 86 87
    B <expression_parse> (57)
        on left: 43
        on right: 41 85 86 87
    assignment_expression <expression_parse> (58)
        on left: 44 45
        on right: 6 7 45 47 71
    assignment_operator (59)
        on left: 46
        on right: 45
    expression <expression_parse> (60)
        on left: 47
        on right: 5 9 41 83 85 86 87 89
    declaration (61)
        on left: 48
        on right: 81 93 97 98
    init_declarator_list <list_for_declarations> (62)
        on left: 49 50
        on right: 48 50
    init_declarator <declaration_parse> (63)
        on left: 51 52
        on right: 49 50
    type_specifier <types> (64)
        on left: 53 54 55
        on right: 48 69 70 94 96
    declarator <declaration_parse> (65)
        on left: 56 57
        on right: 51 52 94 96
    intermediate_identifier <declaration_parse> (66)
        on left: 58
        on right: 60 61 67 68
    direct_declarator <declaration_parse> (67)
        on left: 59 60 61
        on right: 56 57
    parameter_list_opt <list_for_params> (68)
        on left: 62 63
        on right: 61
    pointer <intval> (69)
        on left: 64
        on right: 56 67
    parameter_list <list_for_params> (70)
        on left: 65 66
        on right: 62 66
    intermediate_declarator <declaration_parse> (71)
        on left: 67 68
        on right: 69
    parameter_declaration <params_parse> (72)
        on left: 69 70
        on right: 65 66
    initializer <expression_parse> (73)
        on left: 71
        on right: 52
    statement <expression_parse> (74)
        on left: 72 73 74 75 76
        on right: 82 85 86 87
    compound_statement <expression_parse> (75)
        on left: 77 78
        on right: 72 94 95
    block_item_list <expression_parse> (76)
        on left: 79 80
        on right: 78 80
    block_item <expression_parse> (77)
        on left: 81 82
        on right: 79 80
    expression_statement <expression_parse> (78)
        on left: 83 84
        on right: 73 87
    selection_statement <expression_parse> (79)
        on left: 85 86
        on right: 74
    iteration_statement <expression_parse> (80)
        on left: 87
        on right: 75
    jump_statement <expression_parse> (81)
        on left: 88 89
        on right: 76
    translation_unit (82)
        on left: 90 91
        on right: 0 91
    external_declaration (83)
        on left: 92 93
        on right: 90 91
    function_definition (84)
        on left: 94 95
        on right: 92
    function_prototype <declaration_parse> (85)
        on left: 96
        on right: 95
    declaration_list (86)
        on left: 97 98
        on right: 94 98


State 0

    0 $accept: • translation_unit $end

    CHAR_LEX  shift, and go to state 1
    INT_LEX   shift, and go to state 2
    VOID_LEX  shift, and go to state 3

    declaration           go to state 4
    type_specifier        go to state 5
    translation_unit      go to state 6
    external_declaration  go to state 7
    function_definition   go to state 8
    function_prototype    go to state 9


State 1

   54 type_specifier: CHAR_LEX •

    $default  reduce using rule 54 (type_specifier)


State 2

   55 type_specifier: INT_LEX •

    $default  reduce using rule 55 (type_specifier)


State 3

   53 type_specifier: VOID_LEX •

    $default  reduce using rule 53 (type_specifier)


State 4

   93 external_declaration: declaration •

    $default  reduce using rule 93 (external_declaration)


State 5

   48 declaration: type_specifier • init_declarator_list SEMICOLON
   94 function_definition: type_specifier • declarator declaration_list compound_statement
   96 function_prototype: type_specifier • declarator

    MULTIPLICATION  shift, and go to state 10
    IDENTIFIER      shift, and go to state 11

    init_declarator_list     go to state 12
    init_declarator          go to state 13
    declarator               go to state 14
    intermediate_identifier  go to state 15
    direct_declarator        go to state 16
    pointer                  go to state 17


State 6

    0 $accept: translation_unit • $end
   91 translation_unit: translation_unit • external_declaration

    $end      shift, and go to state 18
    CHAR_LEX  shift, and go to state 1
    INT_LEX   shift, and go to state 2
    VOID_LEX  shift, and go to state 3

    declaration           go to state 4
    type_specifier        go to state 5
    external_declaration  go to state 19
    function_definition   go to state 8
    function_prototype    go to state 9


State 7

   90 translation_unit: external_declaration •

    $default  reduce using rule 90 (translation_unit)


State 8

   92 external_declaration: function_definition •

    $default  reduce using rule 92 (external_declaration)


State 9

   95 function_definition: function_prototype • compound_statement

    LEFT_CURLY_BRACKET  shift, and go to state 20

    compound_statement  go to state 21


State 10

   64 pointer: MULTIPLICATION •

    $default  reduce using rule 64 (pointer)


State 11

   58 intermediate_identifier: IDENTIFIER •
   59 direct_declarator: IDENTIFIER •

    LEFT_SQUARE_BRACKET  reduce using rule 58 (intermediate_identifier)
    LEFT_PARENTHESIS     reduce using rule 58 (intermediate_identifier)
    $default             reduce using rule 59 (direct_declarator)


State 12

   48 declaration: type_specifier init_declarator_list • SEMICOLON
   50 init_declarator_list: init_declarator_list • COMMA init_declarator

    SEMICOLON  shift, and go to state 22
    COMMA      shift, and go to state 23


State 13

   49 init_declarator_list: init_declarator •

    $default  reduce using rule 49 (init_declarator_list)


State 14

   51 init_declarator: declarator •
   52                | declarator • ASSIGN_LEX initializer
   94 function_definition: type_specifier declarator • declaration_list compound_statement
   96 function_prototype: type_specifier declarator •

    CHAR_LEX    shift, and go to state 1
    INT_LEX     shift, and go to state 2
    VOID_LEX    shift, and go to state 3
    ASSIGN_LEX  shift, and go to state 24

    LEFT_CURLY_BRACKET  reduce using rule 96 (function_prototype)
    $default            reduce using rule 51 (init_declarator)

    declaration       go to state 25
    type_specifier    go to state 26
    declaration_list  go to state 27


State 15

   60 direct_declarator: intermediate_identifier • LEFT_SQUARE_BRACKET INTEGER_CONSTANT RIGHT_SQUARE_BRACKET
   61                  | intermediate_identifier • LEFT_PARENTHESIS parameter_list_opt RIGHT_PARENTHESIS

    LEFT_SQUARE_BRACKET  shift, and go to state 28
    LEFT_PARENTHESIS     shift, and go to state 29


State 16

   57 declarator: direct_declarator •

    $default  reduce using rule 57 (declarator)


State 17

   56 declarator: pointer • direct_declarator

    IDENTIFIER  shift, and go to state 11

    intermediate_identifier  go to state 15
    direct_declarator        go to state 30


State 18

    0 $accept: translation_unit $end •

    $default  accept


State 19

   91 translation_unit: translation_unit external_declaration •

    $default  reduce using rule 91 (translation_unit)


State 20

   77 compound_statement: LEFT_CURLY_BRACKET • RIGHT_CURLY_BRACKET
   78                   | LEFT_CURLY_BRACKET • block_item_list RIGHT_CURLY_BRACKET

    CHAR_LEX             shift, and go to state 1
    FOR                  shift, and go to state 31
    IF                   shift, and go to state 32
    INT_LEX              shift, and go to state 2
    RETURN_LEX           shift, and go to state 33
    VOID_LEX             shift, and go to state 3
    LEFT_PARENTHESIS     shift, and go to state 34
    LEFT_CURLY_BRACKET   shift, and go to state 20
    RIGHT_CURLY_BRACKET  shift, and go to state 35
    BITWISE_AND          shift, and go to state 36
    MULTIPLICATION       shift, and go to state 37
    ADD_LEX              shift, and go to state 38
    SUBTRACTION          shift, and go to state 39
    NOT                  shift, and go to state 40
    SEMICOLON            shift, and go to state 41
    IDENTIFIER           shift, and go to state 42
    INTEGER_CONSTANT     shift, and go to state 43
    CHARACTER_CONSTANT   shift, and go to state 44
    STRING_LITERAL       shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 48
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    relational_expression      go to state 52
    equality_expression        go to state 53
    logical_and_expression     go to state 54
    logical_or_expression      go to state 55
    conditional_expression     go to state 56
    assignment_expression      go to state 57
    expression                 go to state 58
    declaration                go to state 59
    type_specifier             go to state 26
    statement                  go to state 60
    compound_statement         go to state 61
    block_item_list            go to state 62
    block_item                 go to state 63
    expression_statement       go to state 64
    selection_statement        go to state 65
    iteration_statement        go to state 66
    jump_statement             go to state 67


State 21

   95 function_definition: function_prototype compound_statement •

    $default  reduce using rule 95 (function_definition)


State 22

   48 declaration: type_specifier init_declarator_list SEMICOLON •

    $default  reduce using rule 48 (declaration)


State 23

   50 init_declarator_list: init_declarator_list COMMA • init_declarator

    MULTIPLICATION  shift, and go to state 10
    IDENTIFIER      shift, and go to state 11

    init_declarator          go to state 68
    declarator               go to state 69
    intermediate_identifier  go to state 15
    direct_declarator        go to state 16
    pointer                  go to state 17


State 24

   52 init_declarator: declarator ASSIGN_LEX • initializer

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 48
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    relational_expression      go to state 52
    equality_expression        go to state 53
    logical_and_expression     go to state 54
    logical_or_expression      go to state 55
    conditional_expression     go to state 56
    assignment_expression      go to state 70
    initializer                go to state 71


State 25

   97 declaration_list: declaration •

    $default  reduce using rule 97 (declaration_list)


State 26

   48 declaration: type_specifier • init_declarator_list SEMICOLON

    MULTIPLICATION  shift, and go to state 10
    IDENTIFIER      shift, and go to state 11

    init_declarator_list     go to state 12
    init_declarator          go to state 13
    declarator               go to state 69
    intermediate_identifier  go to state 15
    direct_declarator        go to state 16
    pointer                  go to state 17


State 27

   94 function_definition: type_specifier declarator declaration_list • compound_statement
   98 declaration_list: declaration_list • declaration

    CHAR_LEX            shift, and go to state 1
    INT_LEX             shift, and go to state 2
    VOID_LEX            shift, and go to state 3
    LEFT_CURLY_BRACKET  shift, and go to state 20

    declaration         go to state 72
    type_specifier      go to state 26
    compound_statement  go to state 73


State 28

   60 direct_declarator: intermediate_identifier LEFT_SQUARE_BRACKET • INTEGER_CONSTANT RIGHT_SQUARE_BRACKET

    INTEGER_CONSTANT  shift, and go to state 74


State 29

   61 direct_declarator: intermediate_identifier LEFT_PARENTHESIS • parameter_list_opt RIGHT_PARENTHESIS

    CHAR_LEX  shift, and go to state 1
    INT_LEX   shift, and go to state 2
    VOID_LEX  shift, and go to state 3

    $default  reduce using rule 63 (parameter_list_opt)

    type_specifier         go to state 75
    parameter_list_opt     go to state 76
    parameter_list         go to state 77
    parameter_declaration  go to state 78


State 30

   56 declarator: pointer direct_declarator •

    $default  reduce using rule 56 (declarator)


State 31

   87 iteration_statement: FOR • LEFT_PARENTHESIS expression_statement A expression_statement B A expression B RIGHT_PARENTHESIS A statement

    LEFT_PARENTHESIS  shift, and go to state 79


State 32

   85 selection_statement: IF • LEFT_PARENTHESIS expression B RIGHT_PARENTHESIS A statement B
   86                    | IF • LEFT_PARENTHESIS expression B RIGHT_PARENTHESIS A statement B ELSE A statement B

    LEFT_PARENTHESIS  shift, and go to state 80


State 33

   88 jump_statement: RETURN_LEX • SEMICOLON
   89               | RETURN_LEX • expression SEMICOLON

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    SEMICOLON           shift, and go to state 81
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 48
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    relational_expression      go to state 52
    equality_expression        go to state 53
    logical_and_expression     go to state 54
    logical_or_expression      go to state 55
    conditional_expression     go to state 56
    assignment_expression      go to state 57
    expression                 go to state 82


State 34

    5 primary_expression: LEFT_PARENTHESIS • expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 48
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    relational_expression      go to state 52
    equality_expression        go to state 53
    logical_and_expression     go to state 54
    logical_or_expression      go to state 55
    conditional_expression     go to state 56
    assignment_expression      go to state 57
    expression                 go to state 83


State 35

   77 compound_statement: LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET •

    $default  reduce using rule 77 (compound_statement)


State 36

   16 unary_operator: BITWISE_AND •

    $default  reduce using rule 16 (unary_operator)


State 37

   17 unary_operator: MULTIPLICATION •

    $default  reduce using rule 17 (unary_operator)


State 38

   18 unary_operator: ADD_LEX •

    $default  reduce using rule 18 (unary_operator)


State 39

   19 unary_operator: SUBTRACTION •

    $default  reduce using rule 19 (unary_operator)


State 40

   20 unary_operator: NOT •

    $default  reduce using rule 20 (unary_operator)


State 41

   84 expression_statement: SEMICOLON •

    $default  reduce using rule 84 (expression_statement)


State 42

    1 primary_expression: IDENTIFIER •

    $default  reduce using rule 1 (primary_expression)


State 43

    2 primary_expression: INTEGER_CONSTANT •

    $default  reduce using rule 2 (primary_expression)


State 44

    3 primary_expression: CHARACTER_CONSTANT •

    $default  reduce using rule 3 (primary_expression)


State 45

    4 primary_expression: STRING_LITERAL •

    $default  reduce using rule 4 (primary_expression)


State 46

    8 postfix_expression: primary_expression •

    $default  reduce using rule 8 (postfix_expression)


State 47

    9 postfix_expression: postfix_expression • LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
   10                   | postfix_expression • LEFT_PARENTHESIS RIGHT_PARENTHESIS
   11                   | postfix_expression • LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
   12                   | postfix_expression • DOT IDENTIFIER
   13                   | postfix_expression • ARROW IDENTIFIER
   14 unary_expression: postfix_expression •

    LEFT_SQUARE_BRACKET  shift, and go to state 84
    LEFT_PARENTHESIS     shift, and go to state 85
    DOT                  shift, and go to state 86
    ARROW                shift, and go to state 87

    $default  reduce using rule 14 (unary_expression)


State 48

   21 multiplicative_expression: unary_expression •
   45 assignment_expression: unary_expression • assignment_operator assignment_expression

    ASSIGN_LEX  shift, and go to state 88

    $default  reduce using rule 21 (multiplicative_expression)

    assignment_operator  go to state 89


State 49

   15 unary_expression: unary_operator • unary_expression

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression  go to state 46
    postfix_expression  go to state 47
    unary_expression    go to state 90
    unary_operator      go to state 49


State 50

   22 multiplicative_expression: multiplicative_expression • MULTIPLICATION unary_expression
   23                          | multiplicative_expression • DIVISION unary_expression
   24                          | multiplicative_expression • MODULO unary_expression
   25 additive_expression: multiplicative_expression •

    MULTIPLICATION  shift, and go to state 91
    DIVISION        shift, and go to state 92
    MODULO          shift, and go to state 93

    $default  reduce using rule 25 (additive_expression)


State 51

   26 additive_expression: additive_expression • ADD_LEX multiplicative_expression
   27                    | additive_expression • SUBTRACTION multiplicative_expression
   28 relational_expression: additive_expression •

    ADD_LEX      shift, and go to state 94
    SUBTRACTION  shift, and go to state 95

    $default  reduce using rule 28 (relational_expression)


State 52

   29 relational_expression: relational_expression • LESS_THAN additive_expression
   30                      | relational_expression • GREATER_THAN additive_expression
   31                      | relational_expression • LESS_THAN_OR_EQUAL_TO additive_expression
   32                      | relational_expression • GREATER_THAN_OR_EQUAL_TO additive_expression
   33 equality_expression: relational_expression •

    LESS_THAN                 shift, and go to state 96
    GREATER_THAN              shift, and go to state 97
    LESS_THAN_OR_EQUAL_TO     shift, and go to state 98
    GREATER_THAN_OR_EQUAL_TO  shift, and go to state 99

    $default  reduce using rule 33 (equality_expression)


State 53

   34 equality_expression: equality_expression • EQUAL relational_expression
   35                    | equality_expression • NOT_EQUAL relational_expression
   36 logical_and_expression: equality_expression •

    EQUAL      shift, and go to state 100
    NOT_EQUAL  shift, and go to state 101

    $default  reduce using rule 36 (logical_and_expression)


State 54

   37 logical_and_expression: logical_and_expression • LOGICAL_AND A equality_expression
   38 logical_or_expression: logical_and_expression •

    LOGICAL_AND  shift, and go to state 102

    $default  reduce using rule 38 (logical_or_expression)


State 55

   39 logical_or_expression: logical_or_expression • LOGICAL_OR A logical_and_expression
   40 conditional_expression: logical_or_expression •
   41                       | logical_or_expression • B QUESTION_MARK A expression B COLON A conditional_expression

    LOGICAL_OR  shift, and go to state 103

    QUESTION_MARK  reduce using rule 43 (B)
    $default       reduce using rule 40 (conditional_expression)

    B  go to state 104


State 56

   44 assignment_expression: conditional_expression •

    $default  reduce using rule 44 (assignment_expression)


State 57

   47 expression: assignment_expression •

    $default  reduce using rule 47 (expression)


State 58

   83 expression_statement: expression • SEMICOLON

    SEMICOLON  shift, and go to state 105


State 59

   81 block_item: declaration •

    $default  reduce using rule 81 (block_item)


State 60

   82 block_item: statement •

    $default  reduce using rule 82 (block_item)


State 61

   72 statement: compound_statement •

    $default  reduce using rule 72 (statement)


State 62

   78 compound_statement: LEFT_CURLY_BRACKET block_item_list • RIGHT_CURLY_BRACKET
   80 block_item_list: block_item_list • A block_item

    RIGHT_CURLY_BRACKET  shift, and go to state 106

    $default  reduce using rule 42 (A)

    A  go to state 107


State 63

   79 block_item_list: block_item •

    $default  reduce using rule 79 (block_item_list)


State 64

   73 statement: expression_statement •

    $default  reduce using rule 73 (statement)


State 65

   74 statement: selection_statement •

    $default  reduce using rule 74 (statement)


State 66

   75 statement: iteration_statement •

    $default  reduce using rule 75 (statement)


State 67

   76 statement: jump_statement •

    $default  reduce using rule 76 (statement)


State 68

   50 init_declarator_list: init_declarator_list COMMA init_declarator •

    $default  reduce using rule 50 (init_declarator_list)


State 69

   51 init_declarator: declarator •
   52                | declarator • ASSIGN_LEX initializer

    ASSIGN_LEX  shift, and go to state 24

    $default  reduce using rule 51 (init_declarator)


State 70

   71 initializer: assignment_expression •

    $default  reduce using rule 71 (initializer)


State 71

   52 init_declarator: declarator ASSIGN_LEX initializer •

    $default  reduce using rule 52 (init_declarator)


State 72

   98 declaration_list: declaration_list declaration •

    $default  reduce using rule 98 (declaration_list)


State 73

   94 function_definition: type_specifier declarator declaration_list compound_statement •

    $default  reduce using rule 94 (function_definition)


State 74

   60 direct_declarator: intermediate_identifier LEFT_SQUARE_BRACKET INTEGER_CONSTANT • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 108


State 75

   69 parameter_declaration: type_specifier • intermediate_declarator
   70                      | type_specifier •

    MULTIPLICATION  shift, and go to state 10
    IDENTIFIER      shift, and go to state 109

    $default  reduce using rule 70 (parameter_declaration)

    intermediate_identifier  go to state 110
    pointer                  go to state 111
    intermediate_declarator  go to state 112


State 76

   61 direct_declarator: intermediate_identifier LEFT_PARENTHESIS parameter_list_opt • RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 113


State 77

   62 parameter_list_opt: parameter_list •
   66 parameter_list: parameter_list • COMMA parameter_declaration

    COMMA  shift, and go to state 114

    $default  reduce using rule 62 (parameter_list_opt)


State 78

   65 parameter_list: parameter_declaration •

    $default  reduce using rule 65 (parameter_list)


State 79

   87 iteration_statement: FOR LEFT_PARENTHESIS • expression_statement A expression_statement B A expression B RIGHT_PARENTHESIS A statement

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    SEMICOLON           shift, and go to state 41
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 48
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    relational_expression      go to state 52
    equality_expression        go to state 53
    logical_and_expression     go to state 54
    logical_or_expression      go to state 55
    conditional_expression     go to state 56
    assignment_expression      go to state 57
    expression                 go to state 58
    expression_statement       go to state 115


State 80

   85 selection_statement: IF LEFT_PARENTHESIS • expression B RIGHT_PARENTHESIS A statement B
   86                    | IF LEFT_PARENTHESIS • expression B RIGHT_PARENTHESIS A statement B ELSE A statement B

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 48
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    relational_expression      go to state 52
    equality_expression        go to state 53
    logical_and_expression     go to state 54
    logical_or_expression      go to state 55
    conditional_expression     go to state 56
    assignment_expression      go to state 57
    expression                 go to state 116


State 81

   88 jump_statement: RETURN_LEX SEMICOLON •

    $default  reduce using rule 88 (jump_statement)


State 82

   89 jump_statement: RETURN_LEX expression • SEMICOLON

    SEMICOLON  shift, and go to state 117


State 83

    5 primary_expression: LEFT_PARENTHESIS expression • RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 118


State 84

    9 postfix_expression: postfix_expression LEFT_SQUARE_BRACKET • expression RIGHT_SQUARE_BRACKET

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 48
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    relational_expression      go to state 52
    equality_expression        go to state 53
    logical_and_expression     go to state 54
    logical_or_expression      go to state 55
    conditional_expression     go to state 56
    assignment_expression      go to state 57
    expression                 go to state 119


State 85

   10 postfix_expression: postfix_expression LEFT_PARENTHESIS • RIGHT_PARENTHESIS
   11                   | postfix_expression LEFT_PARENTHESIS • argument_expression_list RIGHT_PARENTHESIS

    LEFT_PARENTHESIS    shift, and go to state 34
    RIGHT_PARENTHESIS   shift, and go to state 120
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    argument_expression_list   go to state 121
    postfix_expression         go to state 47
    unary_expression           go to state 48
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    relational_expression      go to state 52
    equality_expression        go to state 53
    logical_and_expression     go to state 54
    logical_or_expression      go to state 55
    conditional_expression     go to state 56
    assignment_expression      go to state 122


State 86

   12 postfix_expression: postfix_expression DOT • IDENTIFIER

    IDENTIFIER  shift, and go to state 123


State 87

   13 postfix_expression: postfix_expression ARROW • IDENTIFIER

    IDENTIFIER  shift, and go to state 124


State 88

   46 assignment_operator: ASSIGN_LEX •

    $default  reduce using rule 46 (assignment_operator)


State 89

   45 assignment_expression: unary_expression assignment_operator • assignment_expression

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 48
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    relational_expression      go to state 52
    equality_expression        go to state 53
    logical_and_expression     go to state 54
    logical_or_expression      go to state 55
    conditional_expression     go to state 56
    assignment_expression      go to state 125


State 90

   15 unary_expression: unary_operator unary_expression •

    $default  reduce using rule 15 (unary_expression)


State 91

   22 multiplicative_expression: multiplicative_expression MULTIPLICATION • unary_expression

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression  go to state 46
    postfix_expression  go to state 47
    unary_expression    go to state 126
    unary_operator      go to state 49


State 92

   23 multiplicative_expression: multiplicative_expression DIVISION • unary_expression

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression  go to state 46
    postfix_expression  go to state 47
    unary_expression    go to state 127
    unary_operator      go to state 49


State 93

   24 multiplicative_expression: multiplicative_expression MODULO • unary_expression

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression  go to state 46
    postfix_expression  go to state 47
    unary_expression    go to state 128
    unary_operator      go to state 49


State 94

   26 additive_expression: additive_expression ADD_LEX • multiplicative_expression

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 129
    unary_operator             go to state 49
    multiplicative_expression  go to state 130


State 95

   27 additive_expression: additive_expression SUBTRACTION • multiplicative_expression

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 129
    unary_operator             go to state 49
    multiplicative_expression  go to state 131


State 96

   29 relational_expression: relational_expression LESS_THAN • additive_expression

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 129
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 132


State 97

   30 relational_expression: relational_expression GREATER_THAN • additive_expression

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 129
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 133


State 98

   31 relational_expression: relational_expression LESS_THAN_OR_EQUAL_TO • additive_expression

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 129
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 134


State 99

   32 relational_expression: relational_expression GREATER_THAN_OR_EQUAL_TO • additive_expression

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 129
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 135


State 100

   34 equality_expression: equality_expression EQUAL • relational_expression

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 129
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    relational_expression      go to state 136


State 101

   35 equality_expression: equality_expression NOT_EQUAL • relational_expression

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 129
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    relational_expression      go to state 137


State 102

   37 logical_and_expression: logical_and_expression LOGICAL_AND • A equality_expression

    $default  reduce using rule 42 (A)

    A  go to state 138


State 103

   39 logical_or_expression: logical_or_expression LOGICAL_OR • A logical_and_expression

    $default  reduce using rule 42 (A)

    A  go to state 139


State 104

   41 conditional_expression: logical_or_expression B • QUESTION_MARK A expression B COLON A conditional_expression

    QUESTION_MARK  shift, and go to state 140


State 105

   83 expression_statement: expression SEMICOLON •

    $default  reduce using rule 83 (expression_statement)


State 106

   78 compound_statement: LEFT_CURLY_BRACKET block_item_list RIGHT_CURLY_BRACKET •

    $default  reduce using rule 78 (compound_statement)


State 107

   80 block_item_list: block_item_list A • block_item

    CHAR_LEX            shift, and go to state 1
    FOR                 shift, and go to state 31
    IF                  shift, and go to state 32
    INT_LEX             shift, and go to state 2
    RETURN_LEX          shift, and go to state 33
    VOID_LEX            shift, and go to state 3
    LEFT_PARENTHESIS    shift, and go to state 34
    LEFT_CURLY_BRACKET  shift, and go to state 20
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    SEMICOLON           shift, and go to state 41
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 48
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    relational_expression      go to state 52
    equality_expression        go to state 53
    logical_and_expression     go to state 54
    logical_or_expression      go to state 55
    conditional_expression     go to state 56
    assignment_expression      go to state 57
    expression                 go to state 58
    declaration                go to state 59
    type_specifier             go to state 26
    statement                  go to state 60
    compound_statement         go to state 61
    block_item                 go to state 141
    expression_statement       go to state 64
    selection_statement        go to state 65
    iteration_statement        go to state 66
    jump_statement             go to state 67


State 108

   60 direct_declarator: intermediate_identifier LEFT_SQUARE_BRACKET INTEGER_CONSTANT RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 60 (direct_declarator)


State 109

   58 intermediate_identifier: IDENTIFIER •

    $default  reduce using rule 58 (intermediate_identifier)


State 110

   68 intermediate_declarator: intermediate_identifier •

    $default  reduce using rule 68 (intermediate_declarator)


State 111

   67 intermediate_declarator: pointer • intermediate_identifier

    IDENTIFIER  shift, and go to state 109

    intermediate_identifier  go to state 142


State 112

   69 parameter_declaration: type_specifier intermediate_declarator •

    $default  reduce using rule 69 (parameter_declaration)


State 113

   61 direct_declarator: intermediate_identifier LEFT_PARENTHESIS parameter_list_opt RIGHT_PARENTHESIS •

    $default  reduce using rule 61 (direct_declarator)


State 114

   66 parameter_list: parameter_list COMMA • parameter_declaration

    CHAR_LEX  shift, and go to state 1
    INT_LEX   shift, and go to state 2
    VOID_LEX  shift, and go to state 3

    type_specifier         go to state 75
    parameter_declaration  go to state 143


State 115

   87 iteration_statement: FOR LEFT_PARENTHESIS expression_statement • A expression_statement B A expression B RIGHT_PARENTHESIS A statement

    $default  reduce using rule 42 (A)

    A  go to state 144


State 116

   85 selection_statement: IF LEFT_PARENTHESIS expression • B RIGHT_PARENTHESIS A statement B
   86                    | IF LEFT_PARENTHESIS expression • B RIGHT_PARENTHESIS A statement B ELSE A statement B

    $default  reduce using rule 43 (B)

    B  go to state 145


State 117

   89 jump_statement: RETURN_LEX expression SEMICOLON •

    $default  reduce using rule 89 (jump_statement)


State 118

    5 primary_expression: LEFT_PARENTHESIS expression RIGHT_PARENTHESIS •

    $default  reduce using rule 5 (primary_expression)


State 119

    9 postfix_expression: postfix_expression LEFT_SQUARE_BRACKET expression • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 146


State 120

   10 postfix_expression: postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS •

    $default  reduce using rule 10 (postfix_expression)


State 121

    7 argument_expression_list: argument_expression_list • COMMA assignment_expression
   11 postfix_expression: postfix_expression LEFT_PARENTHESIS argument_expression_list • RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 147
    COMMA              shift, and go to state 148


State 122

    6 argument_expression_list: assignment_expression •

    $default  reduce using rule 6 (argument_expression_list)


State 123

   12 postfix_expression: postfix_expression DOT IDENTIFIER •

    $default  reduce using rule 12 (postfix_expression)


State 124

   13 postfix_expression: postfix_expression ARROW IDENTIFIER •

    $default  reduce using rule 13 (postfix_expression)


State 125

   45 assignment_expression: unary_expression assignment_operator assignment_expression •

    $default  reduce using rule 45 (assignment_expression)


State 126

   22 multiplicative_expression: multiplicative_expression MULTIPLICATION unary_expression •

    $default  reduce using rule 22 (multiplicative_expression)


State 127

   23 multiplicative_expression: multiplicative_expression DIVISION unary_expression •

    $default  reduce using rule 23 (multiplicative_expression)


State 128

   24 multiplicative_expression: multiplicative_expression MODULO unary_expression •

    $default  reduce using rule 24 (multiplicative_expression)


State 129

   21 multiplicative_expression: unary_expression •

    $default  reduce using rule 21 (multiplicative_expression)


State 130

   22 multiplicative_expression: multiplicative_expression • MULTIPLICATION unary_expression
   23                          | multiplicative_expression • DIVISION unary_expression
   24                          | multiplicative_expression • MODULO unary_expression
   26 additive_expression: additive_expression ADD_LEX multiplicative_expression •

    MULTIPLICATION  shift, and go to state 91
    DIVISION        shift, and go to state 92
    MODULO          shift, and go to state 93

    $default  reduce using rule 26 (additive_expression)


State 131

   22 multiplicative_expression: multiplicative_expression • MULTIPLICATION unary_expression
   23                          | multiplicative_expression • DIVISION unary_expression
   24                          | multiplicative_expression • MODULO unary_expression
   27 additive_expression: additive_expression SUBTRACTION multiplicative_expression •

    MULTIPLICATION  shift, and go to state 91
    DIVISION        shift, and go to state 92
    MODULO          shift, and go to state 93

    $default  reduce using rule 27 (additive_expression)


State 132

   26 additive_expression: additive_expression • ADD_LEX multiplicative_expression
   27                    | additive_expression • SUBTRACTION multiplicative_expression
   29 relational_expression: relational_expression LESS_THAN additive_expression •

    ADD_LEX      shift, and go to state 94
    SUBTRACTION  shift, and go to state 95

    $default  reduce using rule 29 (relational_expression)


State 133

   26 additive_expression: additive_expression • ADD_LEX multiplicative_expression
   27                    | additive_expression • SUBTRACTION multiplicative_expression
   30 relational_expression: relational_expression GREATER_THAN additive_expression •

    ADD_LEX      shift, and go to state 94
    SUBTRACTION  shift, and go to state 95

    $default  reduce using rule 30 (relational_expression)


State 134

   26 additive_expression: additive_expression • ADD_LEX multiplicative_expression
   27                    | additive_expression • SUBTRACTION multiplicative_expression
   31 relational_expression: relational_expression LESS_THAN_OR_EQUAL_TO additive_expression •

    ADD_LEX      shift, and go to state 94
    SUBTRACTION  shift, and go to state 95

    $default  reduce using rule 31 (relational_expression)


State 135

   26 additive_expression: additive_expression • ADD_LEX multiplicative_expression
   27                    | additive_expression • SUBTRACTION multiplicative_expression
   32 relational_expression: relational_expression GREATER_THAN_OR_EQUAL_TO additive_expression •

    ADD_LEX      shift, and go to state 94
    SUBTRACTION  shift, and go to state 95

    $default  reduce using rule 32 (relational_expression)


State 136

   29 relational_expression: relational_expression • LESS_THAN additive_expression
   30                      | relational_expression • GREATER_THAN additive_expression
   31                      | relational_expression • LESS_THAN_OR_EQUAL_TO additive_expression
   32                      | relational_expression • GREATER_THAN_OR_EQUAL_TO additive_expression
   34 equality_expression: equality_expression EQUAL relational_expression •

    LESS_THAN                 shift, and go to state 96
    GREATER_THAN              shift, and go to state 97
    LESS_THAN_OR_EQUAL_TO     shift, and go to state 98
    GREATER_THAN_OR_EQUAL_TO  shift, and go to state 99

    $default  reduce using rule 34 (equality_expression)


State 137

   29 relational_expression: relational_expression • LESS_THAN additive_expression
   30                      | relational_expression • GREATER_THAN additive_expression
   31                      | relational_expression • LESS_THAN_OR_EQUAL_TO additive_expression
   32                      | relational_expression • GREATER_THAN_OR_EQUAL_TO additive_expression
   35 equality_expression: equality_expression NOT_EQUAL relational_expression •

    LESS_THAN                 shift, and go to state 96
    GREATER_THAN              shift, and go to state 97
    LESS_THAN_OR_EQUAL_TO     shift, and go to state 98
    GREATER_THAN_OR_EQUAL_TO  shift, and go to state 99

    $default  reduce using rule 35 (equality_expression)


State 138

   37 logical_and_expression: logical_and_expression LOGICAL_AND A • equality_expression

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 129
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    relational_expression      go to state 52
    equality_expression        go to state 149


State 139

   39 logical_or_expression: logical_or_expression LOGICAL_OR A • logical_and_expression

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 129
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    relational_expression      go to state 52
    equality_expression        go to state 53
    logical_and_expression     go to state 150


State 140

   41 conditional_expression: logical_or_expression B QUESTION_MARK • A expression B COLON A conditional_expression

    $default  reduce using rule 42 (A)

    A  go to state 151


State 141

   80 block_item_list: block_item_list A block_item •

    $default  reduce using rule 80 (block_item_list)


State 142

   67 intermediate_declarator: pointer intermediate_identifier •

    $default  reduce using rule 67 (intermediate_declarator)


State 143

   66 parameter_list: parameter_list COMMA parameter_declaration •

    $default  reduce using rule 66 (parameter_list)


State 144

   87 iteration_statement: FOR LEFT_PARENTHESIS expression_statement A • expression_statement B A expression B RIGHT_PARENTHESIS A statement

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    SEMICOLON           shift, and go to state 41
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 48
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    relational_expression      go to state 52
    equality_expression        go to state 53
    logical_and_expression     go to state 54
    logical_or_expression      go to state 55
    conditional_expression     go to state 56
    assignment_expression      go to state 57
    expression                 go to state 58
    expression_statement       go to state 152


State 145

   85 selection_statement: IF LEFT_PARENTHESIS expression B • RIGHT_PARENTHESIS A statement B
   86                    | IF LEFT_PARENTHESIS expression B • RIGHT_PARENTHESIS A statement B ELSE A statement B

    RIGHT_PARENTHESIS  shift, and go to state 153


State 146

    9 postfix_expression: postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 9 (postfix_expression)


State 147

   11 postfix_expression: postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS •

    $default  reduce using rule 11 (postfix_expression)


State 148

    7 argument_expression_list: argument_expression_list COMMA • assignment_expression

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 48
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    relational_expression      go to state 52
    equality_expression        go to state 53
    logical_and_expression     go to state 54
    logical_or_expression      go to state 55
    conditional_expression     go to state 56
    assignment_expression      go to state 154


State 149

   34 equality_expression: equality_expression • EQUAL relational_expression
   35                    | equality_expression • NOT_EQUAL relational_expression
   37 logical_and_expression: logical_and_expression LOGICAL_AND A equality_expression •

    EQUAL      shift, and go to state 100
    NOT_EQUAL  shift, and go to state 101

    $default  reduce using rule 37 (logical_and_expression)


State 150

   37 logical_and_expression: logical_and_expression • LOGICAL_AND A equality_expression
   39 logical_or_expression: logical_or_expression LOGICAL_OR A logical_and_expression •

    LOGICAL_AND  shift, and go to state 102

    $default  reduce using rule 39 (logical_or_expression)


State 151

   41 conditional_expression: logical_or_expression B QUESTION_MARK A • expression B COLON A conditional_expression

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 48
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    relational_expression      go to state 52
    equality_expression        go to state 53
    logical_and_expression     go to state 54
    logical_or_expression      go to state 55
    conditional_expression     go to state 56
    assignment_expression      go to state 57
    expression                 go to state 155


State 152

   87 iteration_statement: FOR LEFT_PARENTHESIS expression_statement A expression_statement • B A expression B RIGHT_PARENTHESIS A statement

    $default  reduce using rule 43 (B)

    B  go to state 156


State 153

   85 selection_statement: IF LEFT_PARENTHESIS expression B RIGHT_PARENTHESIS • A statement B
   86                    | IF LEFT_PARENTHESIS expression B RIGHT_PARENTHESIS • A statement B ELSE A statement B

    $default  reduce using rule 42 (A)

    A  go to state 157


State 154

    7 argument_expression_list: argument_expression_list COMMA assignment_expression •

    $default  reduce using rule 7 (argument_expression_list)


State 155

   41 conditional_expression: logical_or_expression B QUESTION_MARK A expression • B COLON A conditional_expression

    $default  reduce using rule 43 (B)

    B  go to state 158


State 156

   87 iteration_statement: FOR LEFT_PARENTHESIS expression_statement A expression_statement B • A expression B RIGHT_PARENTHESIS A statement

    $default  reduce using rule 42 (A)

    A  go to state 159


State 157

   85 selection_statement: IF LEFT_PARENTHESIS expression B RIGHT_PARENTHESIS A • statement B
   86                    | IF LEFT_PARENTHESIS expression B RIGHT_PARENTHESIS A • statement B ELSE A statement B

    FOR                 shift, and go to state 31
    IF                  shift, and go to state 32
    RETURN_LEX          shift, and go to state 33
    LEFT_PARENTHESIS    shift, and go to state 34
    LEFT_CURLY_BRACKET  shift, and go to state 20
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    SEMICOLON           shift, and go to state 41
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 48
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    relational_expression      go to state 52
    equality_expression        go to state 53
    logical_and_expression     go to state 54
    logical_or_expression      go to state 55
    conditional_expression     go to state 56
    assignment_expression      go to state 57
    expression                 go to state 58
    statement                  go to state 160
    compound_statement         go to state 61
    expression_statement       go to state 64
    selection_statement        go to state 65
    iteration_statement        go to state 66
    jump_statement             go to state 67


State 158

   41 conditional_expression: logical_or_expression B QUESTION_MARK A expression B • COLON A conditional_expression

    COLON  shift, and go to state 161


State 159

   87 iteration_statement: FOR LEFT_PARENTHESIS expression_statement A expression_statement B A • expression B RIGHT_PARENTHESIS A statement

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 48
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    relational_expression      go to state 52
    equality_expression        go to state 53
    logical_and_expression     go to state 54
    logical_or_expression      go to state 55
    conditional_expression     go to state 56
    assignment_expression      go to state 57
    expression                 go to state 162


State 160

   85 selection_statement: IF LEFT_PARENTHESIS expression B RIGHT_PARENTHESIS A statement • B
   86                    | IF LEFT_PARENTHESIS expression B RIGHT_PARENTHESIS A statement • B ELSE A statement B

    $default  reduce using rule 43 (B)

    B  go to state 163


State 161

   41 conditional_expression: logical_or_expression B QUESTION_MARK A expression B COLON • A conditional_expression

    $default  reduce using rule 42 (A)

    A  go to state 164


State 162

   87 iteration_statement: FOR LEFT_PARENTHESIS expression_statement A expression_statement B A expression • B RIGHT_PARENTHESIS A statement

    $default  reduce using rule 43 (B)

    B  go to state 165


State 163

   85 selection_statement: IF LEFT_PARENTHESIS expression B RIGHT_PARENTHESIS A statement B •
   86                    | IF LEFT_PARENTHESIS expression B RIGHT_PARENTHESIS A statement B • ELSE A statement B

    ELSE  shift, and go to state 166

    ELSE      [reduce using rule 85 (selection_statement)]
    $default  reduce using rule 85 (selection_statement)


State 164

   41 conditional_expression: logical_or_expression B QUESTION_MARK A expression B COLON A • conditional_expression

    LEFT_PARENTHESIS    shift, and go to state 34
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 129
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    relational_expression      go to state 52
    equality_expression        go to state 53
    logical_and_expression     go to state 54
    logical_or_expression      go to state 55
    conditional_expression     go to state 167


State 165

   87 iteration_statement: FOR LEFT_PARENTHESIS expression_statement A expression_statement B A expression B • RIGHT_PARENTHESIS A statement

    RIGHT_PARENTHESIS  shift, and go to state 168


State 166

   86 selection_statement: IF LEFT_PARENTHESIS expression B RIGHT_PARENTHESIS A statement B ELSE • A statement B

    $default  reduce using rule 42 (A)

    A  go to state 169


State 167

   41 conditional_expression: logical_or_expression B QUESTION_MARK A expression B COLON A conditional_expression •

    $default  reduce using rule 41 (conditional_expression)


State 168

   87 iteration_statement: FOR LEFT_PARENTHESIS expression_statement A expression_statement B A expression B RIGHT_PARENTHESIS • A statement

    $default  reduce using rule 42 (A)

    A  go to state 170


State 169

   86 selection_statement: IF LEFT_PARENTHESIS expression B RIGHT_PARENTHESIS A statement B ELSE A • statement B

    FOR                 shift, and go to state 31
    IF                  shift, and go to state 32
    RETURN_LEX          shift, and go to state 33
    LEFT_PARENTHESIS    shift, and go to state 34
    LEFT_CURLY_BRACKET  shift, and go to state 20
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    SEMICOLON           shift, and go to state 41
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 48
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    relational_expression      go to state 52
    equality_expression        go to state 53
    logical_and_expression     go to state 54
    logical_or_expression      go to state 55
    conditional_expression     go to state 56
    assignment_expression      go to state 57
    expression                 go to state 58
    statement                  go to state 171
    compound_statement         go to state 61
    expression_statement       go to state 64
    selection_statement        go to state 65
    iteration_statement        go to state 66
    jump_statement             go to state 67


State 170

   87 iteration_statement: FOR LEFT_PARENTHESIS expression_statement A expression_statement B A expression B RIGHT_PARENTHESIS A • statement

    FOR                 shift, and go to state 31
    IF                  shift, and go to state 32
    RETURN_LEX          shift, and go to state 33
    LEFT_PARENTHESIS    shift, and go to state 34
    LEFT_CURLY_BRACKET  shift, and go to state 20
    BITWISE_AND         shift, and go to state 36
    MULTIPLICATION      shift, and go to state 37
    ADD_LEX             shift, and go to state 38
    SUBTRACTION         shift, and go to state 39
    NOT                 shift, and go to state 40
    SEMICOLON           shift, and go to state 41
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45

    primary_expression         go to state 46
    postfix_expression         go to state 47
    unary_expression           go to state 48
    unary_operator             go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    relational_expression      go to state 52
    equality_expression        go to state 53
    logical_and_expression     go to state 54
    logical_or_expression      go to state 55
    conditional_expression     go to state 56
    assignment_expression      go to state 57
    expression                 go to state 58
    statement                  go to state 172
    compound_statement         go to state 61
    expression_statement       go to state 64
    selection_statement        go to state 65
    iteration_statement        go to state 66
    jump_statement             go to state 67


State 171

   86 selection_statement: IF LEFT_PARENTHESIS expression B RIGHT_PARENTHESIS A statement B ELSE A statement • B

    $default  reduce using rule 43 (B)

    B  go to state 173


State 172

   87 iteration_statement: FOR LEFT_PARENTHESIS expression_statement A expression_statement B A expression B RIGHT_PARENTHESIS A statement •

    $default  reduce using rule 87 (iteration_statement)


State 173

   86 selection_statement: IF LEFT_PARENTHESIS expression B RIGHT_PARENTHESIS A statement B ELSE A statement B •

    $default  reduce using rule 86 (selection_statement)
